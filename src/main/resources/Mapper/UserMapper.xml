<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.springboot.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.atguigu.springboot.pojo.User">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="uname" jdbcType="VARCHAR" property="uname" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
    <result column="nicheng" jdbcType="VARCHAR" property="nicheng" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="touxiang" jdbcType="VARCHAR" property="touxiang" />
    <result column="aihao" jdbcType="VARCHAR" property="aihao" />
    <result column="haoma" jdbcType="VARCHAR" property="haoma" />
    <result column="jianjie" jdbcType="VARCHAR" property="jianjie" />
    <result column="qianming" jdbcType="VARCHAR" property="qianming" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, uname, pwd, nicheng, sex, touxiang, aihao, haoma, jianjie, qianming, email
  </sql>
  <select id="selectByExample" parameterType="com.atguigu.springboot.pojo.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.atguigu.springboot.pojo.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.atguigu.springboot.pojo.User">
    insert into user (uid, uname, pwd, 
      nicheng, sex, touxiang, 
      aihao, haoma, jianjie, 
      qianming, email)
    values (#{uid,jdbcType=INTEGER}, #{uname,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR}, 
      #{nicheng,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{touxiang,jdbcType=VARCHAR}, 
      #{aihao,jdbcType=VARCHAR}, #{haoma,jdbcType=VARCHAR}, #{jianjie,jdbcType=VARCHAR}, 
      #{qianming,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.atguigu.springboot.pojo.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="uname != null">
        uname,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="nicheng != null">
        nicheng,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="touxiang != null">
        touxiang,
      </if>
      <if test="aihao != null">
        aihao,
      </if>
      <if test="haoma != null">
        haoma,
      </if>
      <if test="jianjie != null">
        jianjie,
      </if>
      <if test="qianming != null">
        qianming,
      </if>
      <if test="email != null">
        email,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="nicheng != null">
        #{nicheng,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="touxiang != null">
        #{touxiang,jdbcType=VARCHAR},
      </if>
      <if test="aihao != null">
        #{aihao,jdbcType=VARCHAR},
      </if>
      <if test="haoma != null">
        #{haoma,jdbcType=VARCHAR},
      </if>
      <if test="jianjie != null">
        #{jianjie,jdbcType=VARCHAR},
      </if>
      <if test="qianming != null">
        #{qianming,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.atguigu.springboot.pojo.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.uname != null">
        uname = #{record.uname,jdbcType=VARCHAR},
      </if>
      <if test="record.pwd != null">
        pwd = #{record.pwd,jdbcType=VARCHAR},
      </if>
      <if test="record.nicheng != null">
        nicheng = #{record.nicheng,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=CHAR},
      </if>
      <if test="record.touxiang != null">
        touxiang = #{record.touxiang,jdbcType=VARCHAR},
      </if>
      <if test="record.aihao != null">
        aihao = #{record.aihao,jdbcType=VARCHAR},
      </if>
      <if test="record.haoma != null">
        haoma = #{record.haoma,jdbcType=VARCHAR},
      </if>
      <if test="record.jianjie != null">
        jianjie = #{record.jianjie,jdbcType=VARCHAR},
      </if>
      <if test="record.qianming != null">
        qianming = #{record.qianming,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set uid = #{record.uid,jdbcType=INTEGER},
      uname = #{record.uname,jdbcType=VARCHAR},
      pwd = #{record.pwd,jdbcType=VARCHAR},
      nicheng = #{record.nicheng,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=CHAR},
      touxiang = #{record.touxiang,jdbcType=VARCHAR},
      aihao = #{record.aihao,jdbcType=VARCHAR},
      haoma = #{record.haoma,jdbcType=VARCHAR},
      jianjie = #{record.jianjie,jdbcType=VARCHAR},
      qianming = #{record.qianming,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.atguigu.springboot.pojo.User">
    update user
    <set>
      <if test="uname != null">
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="nicheng != null">
        nicheng = #{nicheng,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="touxiang != null">
        touxiang = #{touxiang,jdbcType=VARCHAR},
      </if>
      <if test="aihao != null">
        aihao = #{aihao,jdbcType=VARCHAR},
      </if>
      <if test="haoma != null">
        haoma = #{haoma,jdbcType=VARCHAR},
      </if>
      <if test="jianjie != null">
        jianjie = #{jianjie,jdbcType=VARCHAR},
      </if>
      <if test="qianming != null">
        qianming = #{qianming,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>

  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.atguigu.springboot.pojo.UserWithBLOBs">
    <result column="ssl_cipher" jdbcType="LONGVARBINARY" property="sslCipher" />
    <result column="x509_issuer" jdbcType="LONGVARBINARY" property="x509Issuer" />
    <result column="x509_subject" jdbcType="LONGVARBINARY" property="x509Subject" />
    <result column="authentication_string" jdbcType="LONGVARCHAR" property="authenticationString" />
    <result column="User_attributes" jdbcType="LONGVARCHAR" property="userAttributes" />
  </resultMap>

  <sql id="Blob_Column_List">
    ssl_cipher, x509_issuer, x509_subject, authentication_string, User_attributes
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.atguigu.springboot.pojo.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set User = #{record.user,jdbcType=CHAR},
      Host = #{record.host,jdbcType=CHAR},
      Select_priv = #{record.selectPriv,jdbcType=CHAR},
      Insert_priv = #{record.insertPriv,jdbcType=CHAR},
      Update_priv = #{record.updatePriv,jdbcType=CHAR},
      Delete_priv = #{record.deletePriv,jdbcType=CHAR},
      Create_priv = #{record.createPriv,jdbcType=CHAR},
      Drop_priv = #{record.dropPriv,jdbcType=CHAR},
      Reload_priv = #{record.reloadPriv,jdbcType=CHAR},
      Shutdown_priv = #{record.shutdownPriv,jdbcType=CHAR},
      Process_priv = #{record.processPriv,jdbcType=CHAR},
      File_priv = #{record.filePriv,jdbcType=CHAR},
      Grant_priv = #{record.grantPriv,jdbcType=CHAR},
      References_priv = #{record.referencesPriv,jdbcType=CHAR},
      Index_priv = #{record.indexPriv,jdbcType=CHAR},
      Alter_priv = #{record.alterPriv,jdbcType=CHAR},
      Show_db_priv = #{record.showDbPriv,jdbcType=CHAR},
      Super_priv = #{record.superPriv,jdbcType=CHAR},
      Create_tmp_table_priv = #{record.createTmpTablePriv,jdbcType=CHAR},
      Lock_tables_priv = #{record.lockTablesPriv,jdbcType=CHAR},
      Execute_priv = #{record.executePriv,jdbcType=CHAR},
      Repl_slave_priv = #{record.replSlavePriv,jdbcType=CHAR},
      Repl_client_priv = #{record.replClientPriv,jdbcType=CHAR},
      Create_view_priv = #{record.createViewPriv,jdbcType=CHAR},
      Show_view_priv = #{record.showViewPriv,jdbcType=CHAR},
      Create_routine_priv = #{record.createRoutinePriv,jdbcType=CHAR},
      Alter_routine_priv = #{record.alterRoutinePriv,jdbcType=CHAR},
      Create_user_priv = #{record.createUserPriv,jdbcType=CHAR},
      Event_priv = #{record.eventPriv,jdbcType=CHAR},
      Trigger_priv = #{record.triggerPriv,jdbcType=CHAR},
      Create_tablespace_priv = #{record.createTablespacePriv,jdbcType=CHAR},
      ssl_type = #{record.sslType,jdbcType=CHAR},
      max_questions = #{record.maxQuestions,jdbcType=INTEGER},
      max_updates = #{record.maxUpdates,jdbcType=INTEGER},
      max_connections = #{record.maxConnections,jdbcType=INTEGER},
      max_user_connections = #{record.maxUserConnections,jdbcType=INTEGER},
      plugin = #{record.plugin,jdbcType=CHAR},
      password_expired = #{record.passwordExpired,jdbcType=CHAR},
      password_last_changed = #{record.passwordLastChanged,jdbcType=TIMESTAMP},
      password_lifetime = #{record.passwordLifetime,jdbcType=SMALLINT},
      account_locked = #{record.accountLocked,jdbcType=CHAR},
      Create_role_priv = #{record.createRolePriv,jdbcType=CHAR},
      Drop_role_priv = #{record.dropRolePriv,jdbcType=CHAR},
      Password_reuse_history = #{record.passwordReuseHistory,jdbcType=SMALLINT},
      Password_reuse_time = #{record.passwordReuseTime,jdbcType=SMALLINT},
      Password_require_current = #{record.passwordRequireCurrent,jdbcType=CHAR},
      ssl_cipher = #{record.sslCipher,jdbcType=LONGVARBINARY},
      x509_issuer = #{record.x509Issuer,jdbcType=LONGVARBINARY},
      x509_subject = #{record.x509Subject,jdbcType=LONGVARBINARY},
      authentication_string = #{record.authenticationString,jdbcType=LONGVARCHAR},
      User_attributes = #{record.userAttributes,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.atguigu.springboot.pojo.UserWithBLOBs">
    update user
    set Host = #{host,jdbcType=CHAR},
      Select_priv = #{selectPriv,jdbcType=CHAR},
      Insert_priv = #{insertPriv,jdbcType=CHAR},
      Update_priv = #{updatePriv,jdbcType=CHAR},
      Delete_priv = #{deletePriv,jdbcType=CHAR},
      Create_priv = #{createPriv,jdbcType=CHAR},
      Drop_priv = #{dropPriv,jdbcType=CHAR},
      Reload_priv = #{reloadPriv,jdbcType=CHAR},
      Shutdown_priv = #{shutdownPriv,jdbcType=CHAR},
      Process_priv = #{processPriv,jdbcType=CHAR},
      File_priv = #{filePriv,jdbcType=CHAR},
      Grant_priv = #{grantPriv,jdbcType=CHAR},
      References_priv = #{referencesPriv,jdbcType=CHAR},
      Index_priv = #{indexPriv,jdbcType=CHAR},
      Alter_priv = #{alterPriv,jdbcType=CHAR},
      Show_db_priv = #{showDbPriv,jdbcType=CHAR},
      Super_priv = #{superPriv,jdbcType=CHAR},
      Create_tmp_table_priv = #{createTmpTablePriv,jdbcType=CHAR},
      Lock_tables_priv = #{lockTablesPriv,jdbcType=CHAR},
      Execute_priv = #{executePriv,jdbcType=CHAR},
      Repl_slave_priv = #{replSlavePriv,jdbcType=CHAR},
      Repl_client_priv = #{replClientPriv,jdbcType=CHAR},
      Create_view_priv = #{createViewPriv,jdbcType=CHAR},
      Show_view_priv = #{showViewPriv,jdbcType=CHAR},
      Create_routine_priv = #{createRoutinePriv,jdbcType=CHAR},
      Alter_routine_priv = #{alterRoutinePriv,jdbcType=CHAR},
      Create_user_priv = #{createUserPriv,jdbcType=CHAR},
      Event_priv = #{eventPriv,jdbcType=CHAR},
      Trigger_priv = #{triggerPriv,jdbcType=CHAR},
      Create_tablespace_priv = #{createTablespacePriv,jdbcType=CHAR},
      ssl_type = #{sslType,jdbcType=CHAR},
      max_questions = #{maxQuestions,jdbcType=INTEGER},
      max_updates = #{maxUpdates,jdbcType=INTEGER},
      max_connections = #{maxConnections,jdbcType=INTEGER},
      max_user_connections = #{maxUserConnections,jdbcType=INTEGER},
      plugin = #{plugin,jdbcType=CHAR},
      password_expired = #{passwordExpired,jdbcType=CHAR},
      password_last_changed = #{passwordLastChanged,jdbcType=TIMESTAMP},
      password_lifetime = #{passwordLifetime,jdbcType=SMALLINT},
      account_locked = #{accountLocked,jdbcType=CHAR},
      Create_role_priv = #{createRolePriv,jdbcType=CHAR},
      Drop_role_priv = #{dropRolePriv,jdbcType=CHAR},
      Password_reuse_history = #{passwordReuseHistory,jdbcType=SMALLINT},
      Password_reuse_time = #{passwordReuseTime,jdbcType=SMALLINT},
      Password_require_current = #{passwordRequireCurrent,jdbcType=CHAR},
      ssl_cipher = #{sslCipher,jdbcType=LONGVARBINARY},
      x509_issuer = #{x509Issuer,jdbcType=LONGVARBINARY},
      x509_subject = #{x509Subject,jdbcType=LONGVARBINARY},
      authentication_string = #{authenticationString,jdbcType=LONGVARCHAR},
      User_attributes = #{userAttributes,jdbcType=LONGVARCHAR}
    where User = #{user,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.atguigu.springboot.pojo.User">
    update user
    set Host = #{host,jdbcType=CHAR},
      Select_priv = #{selectPriv,jdbcType=CHAR},
      Insert_priv = #{insertPriv,jdbcType=CHAR},
      Update_priv = #{updatePriv,jdbcType=CHAR},
      Delete_priv = #{deletePriv,jdbcType=CHAR},
      Create_priv = #{createPriv,jdbcType=CHAR},
      Drop_priv = #{dropPriv,jdbcType=CHAR},
      Reload_priv = #{reloadPriv,jdbcType=CHAR},
      Shutdown_priv = #{shutdownPriv,jdbcType=CHAR},
      Process_priv = #{processPriv,jdbcType=CHAR},
      File_priv = #{filePriv,jdbcType=CHAR},
      Grant_priv = #{grantPriv,jdbcType=CHAR},
      References_priv = #{referencesPriv,jdbcType=CHAR},
      Index_priv = #{indexPriv,jdbcType=CHAR},
      Alter_priv = #{alterPriv,jdbcType=CHAR},
      Show_db_priv = #{showDbPriv,jdbcType=CHAR},
      Super_priv = #{superPriv,jdbcType=CHAR},
      Create_tmp_table_priv = #{createTmpTablePriv,jdbcType=CHAR},
      Lock_tables_priv = #{lockTablesPriv,jdbcType=CHAR},
      Execute_priv = #{executePriv,jdbcType=CHAR},
      Repl_slave_priv = #{replSlavePriv,jdbcType=CHAR},
      Repl_client_priv = #{replClientPriv,jdbcType=CHAR},
      Create_view_priv = #{createViewPriv,jdbcType=CHAR},
      Show_view_priv = #{showViewPriv,jdbcType=CHAR},
      Create_routine_priv = #{createRoutinePriv,jdbcType=CHAR},
      Alter_routine_priv = #{alterRoutinePriv,jdbcType=CHAR},
      Create_user_priv = #{createUserPriv,jdbcType=CHAR},
      Event_priv = #{eventPriv,jdbcType=CHAR},
      Trigger_priv = #{triggerPriv,jdbcType=CHAR},
      Create_tablespace_priv = #{createTablespacePriv,jdbcType=CHAR},
      ssl_type = #{sslType,jdbcType=CHAR},
      max_questions = #{maxQuestions,jdbcType=INTEGER},
      max_updates = #{maxUpdates,jdbcType=INTEGER},
      max_connections = #{maxConnections,jdbcType=INTEGER},
      max_user_connections = #{maxUserConnections,jdbcType=INTEGER},
      plugin = #{plugin,jdbcType=CHAR},
      password_expired = #{passwordExpired,jdbcType=CHAR},
      password_last_changed = #{passwordLastChanged,jdbcType=TIMESTAMP},
      password_lifetime = #{passwordLifetime,jdbcType=SMALLINT},
      account_locked = #{accountLocked,jdbcType=CHAR},
      Create_role_priv = #{createRolePriv,jdbcType=CHAR},
      Drop_role_priv = #{dropRolePriv,jdbcType=CHAR},
      Password_reuse_history = #{passwordReuseHistory,jdbcType=SMALLINT},
      Password_reuse_time = #{passwordReuseTime,jdbcType=SMALLINT},
      Password_require_current = #{passwordRequireCurrent,jdbcType=CHAR}
    where User = #{user,jdbcType=CHAR}
  </update>
</mapper>